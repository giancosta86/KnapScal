{
  "name": "KnapScal",
  "tagline": "ScalaFX didactic application for the Knapsack problem",
  "body": "# KnapScal\r\n\r\n*ScalaFX didactic application for the Knapsack problem*\r\n\r\n## Introduction\r\n\r\nKnapScal is a didactic ScalaFX application dedicated to the [Knapsack problem](https://en.wikipedia.org/wiki/Knapsack_problem).\r\n\r\nIt can solve an instance of the problem by employing different techniques:\r\n\r\n* **KP01 Branch & Bound** - with a few standard functions for computing the upper bound of nodes. In particular:\r\n\r\n  * *Dantzig*\r\n\r\n  * *Optimized Dantzig*\r\n\r\n  * *Martello-Toth*\r\n\r\n* **KP01 Dynamic Programming** - keeping track of both active and dominated states\r\n\r\n* **Optimized Dynamic programming** - using recursive functions to compute just the value of the solution\r\n\r\n\r\nAs shown in the screenshots below, the latest version of the application employs the [EighthBridge](https://github.com/giancosta86/EighthBridge) library to actually *render the Knapsack tree* in a Branch & Bound solution!\r\n\r\n\r\n## Requirements\r\n\r\nKnapScal requires Java 8 Update 65 or later compatible version.\r\n\r\n\r\n## Running KnapScal\r\n\r\nThe suggested way to run KnapScal is [MoonDeploy](https://github.com/giancosta86/moondeploy), as it will automatically download and launch the application - just click the *Run with MoonDeploy* button.\r\n\r\nOtherwise, to start the application:\r\n1. Download and decompress the binary zip archive\r\n2. Run the file *bin/KnapScal* (on UNIX) or *bin/KnapScal.bat* (on Windows)\r\n\r\n\r\n## Important note on Branch & Bound solution\r\n\r\nKnapScal now renders the Branch & Bound solution as a tree, just as expected.\r\n\r\nHowever, the algorithm laying out the nodes is approximate - which might result in overlapping nodes.\r\n\r\nConsequently, when solving a Knapsack problem via Branch & Bound, the application asks for 2 rendering parameters:\r\n\r\n* **Estimated node width** - affecting horizontal positioning\r\n\r\n* **Estimated node height** - affecting vertical positioning\r\n\r\nSensible default values are provided; however, should you notice overlapping nodes, you can:\r\n\r\n* Increase the estimated node size\r\n\r\n* Drag & drop the nodes in the tree itself, to reposition them\r\n\r\n\r\n## Employing the kernel\r\n\r\n[KnapScal-core](https://github.com/giancosta86/KnapScal-core), the underlying library, can be used in other applications for the JVM.\r\n\r\n\r\n## Screenshots\r\n\r\n![Problem window](screenshots/ProblemWindow.png)\r\n\r\n![Branch & Bound solution](screenshots/BranchBoundSolution.png)\r\n\r\n![Dynamic programming solution](screenshots/DynamicProgrammingSolution.png)\r\n\r\n![Optimized dynamic programming solution](screenshots/OptimizedDynamicProgrammingSolution.png)\r\n\r\n## Further references\r\n\r\n* [EighthBridge](https://github.com/giancosta86/EighthBridge) - Interactive graph modeling and rendering for ScalaFX\r\n\r\n* [KnapScal-core](https://github.com/giancosta86/KnapScal-core) - Scala library for the Knapsack problem\r\n\r\n* [Professor Silvano Martello - Didactic slides](http://www.or.deis.unibo.it/staff_pages/martello/Slides_LM_new.html)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}